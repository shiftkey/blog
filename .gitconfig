
[alias]
	# short aliases
	st = status 
	co = checkout
	ci = commit
	br = branch
	df = diff
	lg = log -p
	rso = remote show origin
	me = config user.name
	
	up = !git update
	smash = !git ir

	unstage = reset HEAD
	undo-commit = reset --soft HEAD^

	# interactive rebase
	ir = !sh -c 'git rebase -i origin/${1-master}' -

	# log aliases
	log-branch = log origin/master..
	blog = !git log-branch
	mlog = !git log --committer=\"`git me`\"

	# update current branch
	update = !sh -c 'git fetch origin && git rebase -p origin/${1-master}' -

	# creates a diff of current branch against supplied branch, usage: git export-branch [refbranch]
	branch-name = !git for-each-ref --format='%(refname:short)' `git symbolic-ref HEAD`
	export-branch = !git format-patch --stdout $1 > ~/branches/`git branch-name`.diff
	
	# all commits that aren't merges on all branches
	all = !git log --pretty=oneline --abbrev-commit --all --no-merges

	# all commits today for only me
	today = !git all --since='12am' --committer=\"`git me`\"

	# today's commits without formatting or paging
	today-text = !git --no-pager today --no-color
	
	# files different from master on current branch
	fdm = !git diff origin/master... --name-status

	# last commit info in svn style
	last = !git show --name-status
	last-files = !git last --pretty=format:""

	# last commit only certain type of modification
	mlast = !git last-files | awk 'match($1, /M/) {print $2}'
	alast = !git last-files | awk 'match($1, /A/) {print $2}'
	dlast = !git last-files | awk 'match($1, /D/) {print $2}'

	# `git done`
	# current branch: merge, push, non-forced delete branch, show info
	done = !sh -c '~/bin/done -d $1' -
	
	# `git publish`
	# current branch: merge, push, show info
	publish = !sh -c '~/bin/done $1' -

	# `git lint`
	# lints all .php files that are different between current branch and origin/master
	lint = !sh -c '~/bin/lint'

	# `git spawn my-new-branch`
	# make new branch based on master no matter which branch is checked out
	spawn = !sh -c 'git checkout -b $1 ${2-master} && git config branch.$1.localmerge ${2-master}' - 

	# `git nuke my-old-branch`
	# (Checks out master and does a non-forced delete on the branch entered)
	nuke = !git co master && sh -c 'git br -d $1' -

	# `git sync`
	# update current branch and master
	sync = !git update && \
		git co master && \
		git pull && \
		git co @{-1} 

	# `git save`
	# saves a commit in current branch: local branches you will be rebasing
	save = !git commit -am \"save game\"

	# cleanup repo
	cleanup = !git remote prune origin && git gc && git clean -dfx

	# list files changed by last commit in absolute location
	list = !git show --pretty=format:"" --name-only | sed '/^$/d' | sed 's|^|/var/www/|g'

	# give a count of dirty files
	dirty = !git status --porcelain -uno | wc -l

	# number of non-merge commits 
	peeps = !git log --pretty=format:%aN --no-merges | sort | uniq -c | sort -rn

	# awesome placeholders
	crunk = status
	unfuck = status
	deploy = status

	com = checkout master
	fe = fetch origin
	hr = reset origin/master --hard
    bn = !git for-each-ref --format='%(refname:short)' `git symbolic-ref HEAD`
    rb = !sh -c 'BRANCH_NAME=$(git bn) && git com && git fe && git hr && git rebase master $BRANCH_NAME'
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

[color]
	ui = auto

[core]
	autocrlf = true
	ignorecase = false
	whitespace = cr-at-eol
	editor = vim

[user]
	email = me@brendanforster.com
	name = Brendan Forster
[diff]
	tool = bc3
[difftool "bc3"]
	path = c:/program files (x86)/beyond compare 3/bcomp.exe
[merge]
	tool = bc3
[mergetool "bc3"]
	path = c:/program files (x86)/beyond compare 3/bcomp.exe
