<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <id>http://brendanforster.com/</id>
 <title>brendan forster</title>
 <link href="http://brendanforster.com/atom.xml" rel="self" />
 <link href="http://brendanforster.com/" />
 <updated>2011-11-20T16:28:51+08:00</updated>
 <author>
   <name>Brendan Forster</name>
   <email>shift.key@gmail.com</email>
 </author>

 
 <entry>
   <title>jQuery and KnockoutJS in Win8? Sure, why not!</title>
   <link href="http://brendanforster.comjquery-knockout-win8.html" />
   <updated>2011-10-25T21:00:00+08:00</updated>
   <id>http://brendanforster.com.com./jquery-and-knockout-in-win8</id>
   <content type="html">
	<![CDATA[<p>Apparently this is old news to some. Trendsetters...</p>

<p>With Windows 8 supporting HTML/JS (I refuse to call anything HTML5 these days - the words have lost all meaning to me, but that's another topic) applications, I was asked if <a href="http://jquery.com/">jQuery</a> is supported - with a goal to making JS applications more maintainable.</p>

<p>As I'd heard it mentioned at BUILD - and hadn't heard a major drama since people have been using the Developer Preview bits - I expected that it worked. However, to confirm this for myself, I found this <a href="http://social.msdn.microsoft.com/Forums/en-US/winappswithhtml5/thread/66273417-92cd-4a35-b9a1-281d962eff59">forum thread</a> on MSDN with a coouple of caveats.</p>

<p>No fire and brimstone? Oh well, I'll just double-check...</p>

<p>After adding the jQuery file to the project, I modified the <strong>default.html</strong> file to include the jQuery file <strong>before</strong> the default.js file. The default.js file contains the bootstrapping code for the application:</p>

<pre><code>   &lt;link rel="stylesheet" href="/css/default.css" /&gt;
    <strong>&lt;script src="/js/jquery-1.6.4.js"&gt;&lt;/script&gt;</strong>
    &lt;script src="/js/default.js"&gt;&lt;/script&gt;
&lt;/head&gt;

</code></pre>


<p>And at the bottom of the default.js file, I use a simple selector to find a DOM element:</p>

<pre><code>            // other code

            WinJS.UI.process(<strong>$('#appbar')[0]</strong>)
                .then(function () { 
                    <strong>$('#home').click(navigateHome);</strong>
                });

            WinJS.Navigation.navigate(homePage);

            <strong>var host = $('#contentHost');</strong>
        }
    }

    WinJS.Navigation.addEventListener('navigated', navigated);
    WinJS.Application.start();

})();
</code></pre>


<p>and started making use of selectors elsewhere instead of document.getElementById to make the code more concise...</p>

<h2>And what of KnockoutJS?</h2>

<p>I've only had basic experience with <a href="http://knockoutjs.com/">Knockout</a>, but found an easier scenario to support. I dropped in the code and modified the detailPage template.</p>

<pre><code>   &lt;link rel="stylesheet" href="/css/default.css" /&gt;
    &lt;link rel="stylesheet" href="/css/detailPage.css" /&gt;
    &lt;script type="ms-deferred/javascript" src="/js/detailPage.js"&gt;&lt;/script&gt;
    <strong>&lt;script type="ms-deferred/javascript" src="/js/knockout-1.2.1.js"&gt;&lt;/script&gt;</strong>
&lt;/head&gt;

</code></pre>


<p>And then went to work making changes:</p>

<p><strong>In detailPage.js</strong></p>

<p><em>Before</em></p>

<pre><code>function fragmentLoad(elements, options) {
    var item = options &amp;&amp; options.item ? options.item : getItem();
    elements.querySelector('.pageTitle').textContent = item.group.title;

    WinJS.UI.processAll(elements)
        .then(function () {
            elements.querySelector('.title').textContent = item.title;
            elements.querySelector('.content').innerHTML = item.content;
        });
}
</code></pre>

<p><em>After</em></p>

<pre><code>function fragmentLoad(elements, options) {
    var item = options &amp;&amp; options.item ? options.item : getItem();
    WinJS.UI.processAll(elements).then(function () { <strong>ko.applyBindings(item);</strong> });
}
</code></pre>


<p><strong>In detailPage.html - declared some bindings using the data-bind attribute</strong></p>

<pre><code>&lt;div class="detailPage fragment"&gt;
    &lt;header role="banner" aria-label="Header content"&gt;
        &lt;button disabled class="win-backbutton" aria-label="Back"&gt;&lt;/button&gt;
        &lt;div class="titleArea"&gt;
            &lt;h1 class="pageTitle win-title" <strong>data-bind="text: group.title"</strong>&gt;&lt;/h1&gt;

        &lt;/div&gt;
    &lt;/header&gt;
    &lt;section role="main" aria-label="Main content"&gt;
        &lt;article&gt;
            &lt;div&gt;
                &lt;header&gt;

                    &lt;h1 class="title win-contentTitle" <strong>data-bind="text: title"</strong>&gt;&lt;/h1&gt;
                &lt;/header&gt;
                &lt;div class="image" <strong>data-bind="style: { color: backgroundColor }"</strong>&gt;&lt;/div&gt;
                &lt;div class="content" <strong>data-bind="html: content"</strong>&gt;&lt;/div&gt;
            &lt;/div&gt;

        &lt;/article&gt;
    &lt;/section&gt;
&lt;/div&gt;
</code></pre>


<p>So by moving the binding expressions to the UI (like the MVVM pattern that is popular with XAML application) we can lean on frameworks to make our Javascript code easier to maintain. Other components of the default templates have their own binding attributes - <em>data-win-bind</em> - which I'll explain later, but I find the KnockoutJS syntax more concise.</p>

<p>In particular the use of <em>textContent</em> instead of <em>text</em> to denote a text value? Why? Drop the 'Content' part unless there's a real good reason - it feels like ceremony.</p>

<p>I'll formulate some more opinions on the WinJS side as I delve deeper....</p>
]]>
   </content>
   
 </entry>
 
 <entry>
   <title>I'm speaking at DDD Brisbane</title>
   <link href="http://brendanforster.comddd-brisbane.html" />
   <updated>2011-10-22T21:00:00+08:00</updated>
   <id>http://brendanforster.com.com./ddd-brisbane</id>
   <content type="html">
	<![CDATA[<p><img src='/img/main/metro-preview.png' width='400' height='300' alt='' title='' style='float: right;margin-left: 1.5em;'></p>

<p>The <a href="http://dddbrisbane.com">dddBrisbane</a> organisers sent out a call over the weekend to finalise the schedule - some very cool talks that I'm looking forward to seeing (look for the schedule to appear early this week).</p>

<p>I'm especially honoured to see my session was picked - especially after seeing the depth of Windows 8 talks submitted.</p>

<p>So what am I talking about?</p>

<h2>Windows 8 - Who Moved My Cheese?</h2>

<p>I'll link back to my abstract once I remember what I submitted, but keep in mind there is another Windows 8 session in the mix - so I'll probably tweak the script to prevent overlap.</p>

<p>What shall we discuss?</p>

<ul>
<li> what is this Windows Runtime thing?</li>
<li> when should I go full metro? and what's classic mode?</li>
<li> how do I do X with Windows Runtime?</li>
<li> what new feature does Windows Runtime bring?</li>
<li> how do I wrap my head around doing client apps in HTML/JS?</li>
<li> tips and tricks for maintainable code</li>
<li> ...</li>
</ul>


<p>I'll add links to the content after the talk, so check back for more details.</p>

<p><a href="http://dddbrisbane.com/register">Registration</a> is only $25, and the DDD events are always a fun day (especially the after-party, if you can hang around for that).</p>
]]>
   </content>
   
 </entry>
 
 <entry>
   <title>Doing the build server dance with NuGet</title>
   <link href="http://brendanforster.comdoing-the-build-server-dance-with-nuget.html" />
   <updated>2011-07-08T12:00:00+08:00</updated>
   <id>http://brendanforster.com.com./doing-the-build-server-dance-with-nuget</id>
   <content type="html">
	<![CDATA[<p>I started exploring NuGet package building yesterday evening, as a strategy for managing dependencies between projects I'm involved with.</p>

<p>And with NuGet in the enterprise being the <a href="http://www.hanselman.com/blog/NuGetForTheEnterpriseNuGetInAContinuousIntegrationAutomatedBuildSystem.aspx">upcoming hotness</a>, I thought I'd see how I could get companies I work with to start doing similar things with their internal projects. It was much easier than I'd expected, with a couple of hurdles.</p>

<h2>The Goal</h2>

<p>I have two projects, A and B. A has no upstream dependencies (that have NuGet packages, anyway), but B requires A.</p>

<p>So, after A builds and passes its tests, I want to:</p>

<ul>
<li>Create a new package for A, using it's build number.</li>
<li>Publish the package for A somewhere</li>
<li>Trigger a new build for B, using the newest version of A.</li>
<li>Verify B builds and passes tests.</li>
<li>Create a new package for B, using it's build number.</li>
<li>Publish the package for B somewhere.</li>
</ul>


<p>After a couple of hours work, I'm 95% of the way there.</p>

<h2>Defining the package specification</h2>

<p>As I wasn't really familiar with the process of creating the .nuspec file (sorry <a href="http://twitter.com/damianedwards">Damo</a>, your NDC talk was a long time ago :)) I decided to go and craft it by hand. I used this <a href="http://lostechies.com/joshuaflanagan/2011/06/23/tips-for-building-nuget-packages/">blog post</a> by <a href="http://twitter.com/jflanagan">Joshua Flanagan</a> (including a good reference <a href="https://github.com/DarthFubuMVC/bottles/blob/6d82e063fd889ac1909c98adc369a97b4c1e377e/packaging/nuget/bottles.nuspec">nuspec file</a>) to get started.</p>

<p>And that's about it. Put that into my build folder along with the NuGet.exe - I grabbed the latest one from the 1.4 OOB build on <a href="http://ci.nuget.org:8080/">NuGet CI server</a> due to an issue with how it parses the &lt;files&gt; element. This should be part of the next release.</p>

<h2>Building the package on the server</h2>

<p>So, I'm using TeamCity to build the project. Thus, I can use the build number directly against the NuGet package.</p>

<p>NOTE: Using the default value TeamCity provides for a project, which is just an incrementing integer, will fail with a "Version string portion was too short or too long" error. To fix that, go to General Settings and make it something more descriptive:</p>

<p><img src="img/posts/NuGet/BuildNumber.png" alt="General Settings" /></p>

<p>With that in place, the next step is to add in a post-build step:</p>

<p><a href="/img/posts/NuGet/PackageStep.png"><img src="/img/posts/NuGet/PackageStep-Small.png" alt="Post Build Step" /></a></p>


<p>The script I've used (duplicated for two different packages):</p>

<pre><code>del *.nupkg

.\NuGet.exe pack Package.nuspec -Version %system.build.number%
</code></pre>

<p>That script is courtesy of Scott Kirkland, who also has a decent guide to using NuGet on TC <a href="http://weblogs.asp.net/srkirkland/archive/2011/03/29/deploy-nuget-packages-during-ci-build-with-teamcity.aspx">here</a></p>

<h2>Publishing the package</h2>

<p>I didn't want to publish these packages to the NuGet gallery immediately, so what other options do I have? I could set up my own NuGet gallery. Or I could use <a href="http://www.myget.org/">MyGet</a> and skip all the hassle.</p>

<p>For those who aren't familiar with MyGet, its a service to create custom NuGet feeds. All I've done so far is create a private feed (which anyone can consume) and obtained an API key.</p>

<p><a href="img/posts/NuGet/myget.png"><img src="img/posts/NuGet/myget-small.png" alt="Post Build Step" /></a></p>


<p>While MyGet supports the ability to upload or create packages within the admin UI, I was feeling lazy and wanted to push packages from the build server.</p>

<p>This required an additional line in the script:</p>

<pre><code>del *.nupkg

.\NuGet.exe pack Package.nuspec -Version %system.build.number%

forfiles /m *.nupkg /c "cmd /c NuGet.exe push @FILE &lt;your-key&gt; -Source https://www.myget.org/F/mahapps/"
</code></pre>

<p>which will find all .nupkg files and invoke <em>push</em> against the specific repository - in this case, my private feed.</p>

<h2>Trigger a new build</h2>

<p>This isn't directly related to NuGet, but I wanted to force a new build when upstream packages change in TeamCity.</p>

<p>Under Build Triggering in the Project Configuration, add a trigger for "Finish Build" and select the upstream project.</p>

<p><a href="img/posts/NuGet/buildtriggering.png"><img src="img/posts/NuGet/buildtriggering-small.png" alt="Add Build Trigger" /></a></p>


<h2>Update the package for A and test</h2>

<p>Right, this is where things get rough.</p>

<p>I added a step before building the project, and executed this command:</p>

<pre><code>.\Nuget.exe update ..\MahApps.Twitter.sln -Source http://www.myget.org/f/mahapps
</code></pre>

<p>which will look through all the projects in my solution and update to the newest packages it can find. I've added in my MyGet feed URL to grab the latest packages from the specific feed.</p>

<p>And this works. Kinda.</p>

<p><a href="img/posts/NuGet/updatescripts.png"><img src="img/posts/NuGet/updatescripts-small.png" alt="Success?" /></a></p>


<p>It updates my projects, but doesn't store updated packages locally.
Which causes my build to break.</p>

<p><a href="img/posts/NuGet/compileerrors.png"><img src="img/posts/NuGet/compileerrors-small.png" alt="Oops" /></a></p>


<p>Scouring the forums produced <a href="http://nuget.codeplex.com/discussions/264082">this discussion</a> on this issue, which recommended this workaround:</p>

<pre><code>nuget install MyProj\packages.config -o packages
</code></pre>

<p><strong>NOTE</strong>: a minor grievance with the <em>install</em> command. Unlike the <em>update</em> command, this works against a project's repository. This seems subpar, when I can call <em>update</em> against a solution file. Can we get some consistency with this? Or have I missed something with how install behaves?</p>

<p>Fine, not all workarounds are pretty.</p>

<p>Let's modify my script to suit:</p>

<pre><code>.\Nuget.exe update ..\MahApps.Twitter.sln -Source http://www.myget.org/f/mahapps -Source https://go.microsoft.com/fwlink/?LinkID=206669 -o ..\packages

.\Nuget.exe install ..\src\Identica\packages.config -Source http://www.myget.org/f/mahapps -Source https://go.microsoft.com/fwlink/?LinkID=206669 -o ..\packages

.\Nuget.exe install ..\src\NET4\packages.config -Source http://www.myget.org/f/mahapps -Source https://go.microsoft.com/fwlink/?LinkID=206669 -o ..\packages

.\Nuget.exe install ..\src\Tests\packages.config -Source http://www.myget.org/f/mahapps -Source https://go.microsoft.com/fwlink/?LinkID=206669 -o ..\packages

.\Nuget.exe install ..\src\WP7\packages.config -Source http://www.myget.org/f/mahapps -Source https://go.microsoft.com/fwlink/?LinkID=206669 -o ..\packages
</code></pre>

<p>Icky. Whatever, I've got awesome to do.</p>

<p><em>https://go.microsoft.com/fwlink/?LinkID=206669</em> is the path to the official NuGet feed (the build server couldn't find some packages), and it is explicitly after my local feed (I may have some custom packages which I prefer). And I've added the "-o" parameter to point to the default packages location, just in case.</p>

<p>Aaaaand...</p>

<p><a href="img/posts/NuGet/installedpackages.png"><img src="img/posts/NuGet/installedpackages-small.png" alt="Success!" /></a></p>


<p>Booyah!</p>

<h2>TODO</h2>

<ul>
<li>submit patch for making update more "correct" ?</li>
<li>demonstrate how to add to VS tooling and how it changes dev story</li>
<li>some documentation on managing upstream dependencies</li>
</ul>

]]>
   </content>
   
 </entry>
 
 <entry>
   <title>Soapbox: INotifyPropertyChanged - Stop the Madness</title>
   <link href="http://brendanforster.cominotifypropertychanged-stop-the-madness.html" />
   <updated>2011-06-18T12:00:00+08:00</updated>
   <id>http://brendanforster.com.com./inotifypropertychanged-stop-the-madness</id>
   <content type="html">
	<![CDATA[<p>Its time to stop with this madness.</p>

<p>Apologies again to <a href="http://twitter.com/kiwipom">Ian</a> as I picked on him unnecessarily when I read yet another "Let's make OnPropertyChanged compile safe" <a href="http://xaml.geek.nz/binding/5">blog post</a> yesterday.</p>

<p>I don't have an issue with the approach, but I had an issue with the bigger picture - how little had changed for XAML developers in this regard. Keep in mind that lambdas were first made available in C# 3.0 - which itself was made available in 2007, with .NET 3.5.</p>

<p>I've been summoned into this debate <a href="http://www.mail-archive.com/ozdotnet@ozdotnet.com/msg03903.html">before</a> (and was assumed to be a "cool kid") so I thought I'd put down some thoughts on the issue, and what I think needs to change:</p>

<h2>Stop writing plumbing code</h2>

<p>Every time you write logic in the setter of a property, an angel disappoints her family by taking up stripping.</p>

<p>There have been compelling reasons to do so. After dealing with the resulting pain, I've explored other options to take all those needs away. So let's break it down:</p>

<p>To start off with the <em>worst</em> case scenario, we have:</p>

<pre><code>private string _someProperty;
public string SomeProperty
{
    get { return _someProperty; }
    set 
    { 
        _someProperty = value;
        OnPropertyChanged("SomeProperty");
    }
}
</code></pre>

<h3>Make it refactor-friendly - let's use a lambda instead!</h3>

<p>Yes, this is better than magic strings - that's about it. Don't you get that sinking feeling when adding a new property to the viewmodel, and the code inside the setter looks almost identical to all the others?</p>

<p>So let's change the property to look like:</p>

<pre><code>private string _someProperty;
public string SomeProperty
{
    get { return _someProperty; }
    set 
    { 
        _someProperty = value;
        OnPropertyChanged(() =&gt; SomeProperty);
    }
}
</code></pre>

<p>For an example implementation that accepts lambda statements, <a href="http://stackoverflow.com/questions/141370/inotifypropertychanged-property-name-hardcode-vs-reflection/1209104#1209104">this Stackoverflow answer</a> is a good starting point.</p>

<h3>I only want to raise the change when the backing value actually changes!</h3>

<p>"Wait," the audience exlaims in shock, "you're going to raise the event each time now." The author relents, and adds some code to end the pain for the audience:</p>

<pre><code>private string _someProperty;
public string SomeProperty
{
    get { return _someProperty; }
    set 
    { 
        if (_someProperty == value)
            return;

        _someProperty = value;
        OnPropertyChanged(() =&gt; SomeProperty);
    }
}
</code></pre>

<p>I'd better ensure this is defined in all the setters, and that the right backing field is used in each case. I'd look pretty silly if I'd used the wrong field, like this:</p>

<pre><code>// elsewhere in the codebase
private string _someOtherProperty;

// ...

private string _someProperty;
public string SomeProperty
{
    get { return _someProperty; }
    set 
    { 
        if (_someOtherProperty == value)
            return;

        _someProperty = value;
        OnPropertyChanged(() =&gt; SomeProperty);
    }
}
</code></pre>

<p>so I'd better do it real carefully...</p>

<h3>We need caching now!</h3>

<p>Really? That's what comes to mind next? You crazy developers.</p>

<p>Fine, let's add a dictionary to capture the event arguments, instead of recreating them each time (adapted from this <a href="http://www.paulstovell.com/strong-property-names">blog post</a>):</p>

<pre><code>public class ViewModelBase
{
    protected void OnPropertyChanged(Expression&lt;Func&lt;object&gt;&gt; lambda)
    {
        // Go read Paul (and especially Miguel's comment) about this [here][6]. I'll wait...
    }

    private IDictionary&lt;string, PropertyChangedEventArgs&gt; _handlers = new Dictionary&lt;string, PropertyChangedEventArgs&gt;      

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChangedEventArgs args;

        if (!_handlers.ContainsKey(propertyName))
        {
            _handlers.Add(propertyName, new PropertyChangedEventArgs(propertyName));
        }

        args = _handlers[propertyName];

        PropertyChanged(this, args);
    }
}
</code></pre>

<p>Have we saved much? Perhaps. Perhaps not...</p>

<h3>Wait, what about cross-thread issues? I do a lot on the background thread!</h3>

<p>Ah yes. Have you ever been bitten by this one - a background thread updates a property, which triggers the PropertyChanged event, which asplodes because the UI can only be updated from the main thread?</p>

<h2>Stop. Put down the keyboard for a minute.</h2>

<p>See how quickly all these features around INotifyPropertyChanged can spiral out of control? You've worked out the code and classes necessary to solve a common problem, but some overhead remains for writing boilerplate code everywhere the solution is required. And while it is a manual process, it is prone to human error.</p>

<p>Go back and read that last sentence again. Did something click about what you've been doing all along with INotifyPropertyChanged?</p>

<p><img src="/img/posts/Achievement.jpg" alt="Huzzah!" /></p>

<h2>A what?</h2>

<p>INotifyPropertyChanged is a very specialised example of a cross-cutting concern.</p>

<p>We use INotifyPropertyChanged in many places when doing XAML-based applications - as it is critical when databinding POCO objects without requiring the use of DependencyProperty instances. Although we spent a lot of time optimising the behaviour of invoking INotifyPropertyChanged, we didn't improve <strong>how</strong> this code is used - we're still copying-and-pasting the same code around, and having to make manual changes to each instance to suit the property.</p>

<p>We need the ability to apply the INotifyPropertyChanged behaviour in an automatic way. Of course, there are various tradeoffs to consider - which I'll outline from my experiences.</p>

<h2>What Next?</h2>

<p>I need to wrap this post up before it becomes even longer, so until my next post - where I'll discuss how AOP flips all this discussion on its ear - readers can get ahead by reading these links:</p>

<p><strong>Sacha Barber - <a href="http://www.codeproject.com/KB/library/Aspects.aspx">Aspect Examples (INotifyPropertyChanged via Aspects)</a></strong></p>

<p><a href="http://twitter.com/philiplaureano">Philip Laureano</a> linked me this yesterday. A large read, but lots of demo code for people who want to see something more concrete.</p>

<p><strong><a href="http://code.google.com/p/notifypropertyweaver/">NotifyPropertyWeaver</a> - a .NET library for weaving INotifyPropertyChanged code into IL</strong></p>

<p>This is my library of choice for automating INotifyPropertyChanged usage. I definitely owe <a href="http://twitter.com/simoncropp">Simon</a> a beer (or drink of choice) next time we cross paths - its been a joy to use.</p>
]]>
   </content>
   
 </entry>
 
 <entry>
   <title>On the Windows 8 Preview Video</title>
   <link href="http://brendanforster.comon-the-windows-8-preview.html" />
   <updated>2011-06-08T12:00:00+08:00</updated>
   <id>http://brendanforster.com.com./on-the-windows-8-preview</id>
   <content type="html">
	<![CDATA[<p>For those who haven't seen it, this video was announced last week about how the Windows 8 UI is changing: <a href="http://www.youtube.com/watch?v=p92QfWOw88I">http://www.youtube.com/watch?v=p92QfWOw88I</a></p>

<p>It was the trigger for significant backlash - and not for what was said, but for what wasn't said around the other options available for building Windows applications.</p>

<h2>Yes, MSFT could have handled it better</h2>

<p>Since the video dropped, developers and possibly everyone with a blog has been raising concerns about the other options available to developers for building Windows apps. The underlying vibe has been "everything else has been abandoned, the only option is now HTML5, the sky is falling and I have nothing to wear". I haven't watched the Sinofsky video (if it was even recorded), but when you see reporting like:</p>

<blockquote><p>"The development platform is based on HTML5 and JavaScript." <a href="http://news.cnet.com/8301-31021_3-20068119-260/sinofsky-shows-off-windows-8-at-d9/">Source</a></p></blockquote>

<p>and constrast with a different source:</p>

<blockquote><p>"Windows 8 essentially supports two kinds of applications. One is the classic Windows application, which runs in a desktop very similar to the Windows 7 desktop." <a href="http://allthingsd.com/20110601/exclusive-making-sense-of-what-we-just-learned-about-windows-8/">Source</a></p></blockquote>

<p>then you know something got lost in the message.</p>

<h2>The sky is falling for <em>insert technology here</em></h2>

<p><a href="http://forums.silverlight.net/forums/t/230502.aspx">That thread</a>. Oh dear $deity, <a href="http://forums.silverlight.net/forums/p/230725/563975.aspx">that thread</a>.</p>

<p>I appreciate that the MSFT guys "in the field" are stuck between a rock and a hard place currently - they cannot provide details to answer people's concerns or questions, but are dealing with a large backlash due to the large amount that is not know currently.</p>

<p>As one of those in the audience who has to wait, in uncertainty, between now and <a href="http://www.buildwindows.com/">BUILD</a> to have these questions answered, I wish they would rethink this decision and respond to questions and help change the course of discussion.</p>

<p>While the video does mention:</p>

<blockquote><p>"Windows 8 also runs the existing Windows apps that you know and that you love"</p></blockquote>

<p>it then follows up with running Excel.</p>

<p>Yep. Excel.</p>

<p>While an Excel demo is a good indicator of the backwards compatibility that Windows is famous for, it was a jarring change from the rest of the video, and I'm not sure it was the best application to demonstrate.</p>

<p>Perhaps the developer story is not ready to show. Perhaps it was supposed to be about the shell, and HTML5 was only mentioned in passing. Perhaps, perhaps, perhaps. I suspect a demonstration of how a WPF/SL/Winforms/native application <strong>could</strong> look/feel/behave within the new shell would provide some information without giving much away.</p>

<p>The video was about creating interest in the new platform and discussing the opportunities it provides. Now is the time to talk more broadly, while everyone is talking about it.</p>

<p>So instead of <a href="http://forums.silverlight.net/forums/t/230744.aspx">drumming up more drama</a>, I thought I'd share some takeaways for both sides on this:</p>

<h2>Devs: pay attention to the user experience</h2>

<p>I hope developers took away from this story how the user experience of applications has changed, and how the classic WIMP (Windows, Icons, Menu, Pointer) applications will be impacted. Much like the transition from Windows Mobile 6.5 to Windows Phone 7, I anticipate some growing pains once developers get their hands on the development tools.</p>

<p>Touch input is also something that many Windows developers may not be familiar with. While it has been available to native developers since Windows 7 launched, and was added to WPF and Silverlight with subsequent product releases, it hasn't really been utilized to anywhere near its full potential.</p>

<p>Get familiar with how gestures work - as a starting point, the WP7 emulator turns mouse inputs into touch inputs. Touch will be mandatory if you want an application to be usable on different form factors (Windows 8 is taking an iOS-ish route with the same codebase running on desktops, tablets and devices).</p>

<h2>MSFT: don't let the echo chamber continue</h2>

<p>I'm still baffled by the decision to stonewall. Developers are customers, and they have questions. Why not be pro-active and help smooth the transition over the coming months?</p>

<p>With all the strong and passionate opinions flying around, wouldn't it be good to plant some seeds of confidence and turn the conversation from "Where is XYZ?" to "What can I do with Windows 8 using XYZ?"</p>

<p>Give the community a baseline of information so they can start planning and start providing feedback. It doesn't have to be revealing all the cards, but the developer story for Windows 8 is (mostly) unknown currently. That's why people are concerned.</p>

<h2>MSFT: don't forget the hardware</h2>

<p>I've been looking for a kick-arse tablet device to run Windows on for a while, but have been stuck in Goldilocks-mode - "too large, too heavy, the battery is too short, etc" - and continue to sit on the fence. Much like with WP7, I'm curious about the involvement of hardware vendors to support the new features coming in Windows 8.</p>

<p>Windows 7 was launched with support for touch input, but it never really gained traction due to lack of a compelling tablet device - the Touchsmarts were a nice device, but were primarily for kiosks, rather than daily usage.</p>

<p>Compare Windows 7 to the WP7 launches - which have been done with device announcements involving hardware vendors - and it gives me hope that the launch can be done in a more "complete" fashion.</p>

<p>And I want to see more presentations from MSFT about Windows 8 using touch - drive the presentations from a tablet, demonstrate how the new UI supports touch, and compel me to put it everywhere.</p>
]]>
   </content>
   
 </entry>
 
 <entry>
   <title>slsvcutil - Workaround StackOverflowException</title>
   <link href="http://brendanforster.comslsvcutil-stackoverflowexception-workaround.html" />
   <updated>2011-05-06T12:00:00+08:00</updated>
   <id>http://brendanforster.com.com./slsvcutil-stackoverflowexception-workaround</id>
   <content type="html">
	<![CDATA[<p>I've hit this issue before, but it took a bit of googling to remember the fix - especially since that little site called <a href="http://www.stackoverflow.com/">stackoverflow</a> came into the mix :)</p>

<pre><code>D:\Readify\Hg\ReadifySample\src&gt;"C:\Program Files (x86)\Microsoft SDKs\Silverlight\v4.0\Tools\Slsvcutil.exe" http://localhost:47862/Services/ParentService.svc

Process is terminated due to StackOverflowException.
</code></pre>

<p>No configuration options set. No informative error message. Annoying.</p>

<p>The solution, which was initially posted <a href="http://blogs.msdn.com/b/silverlightws/archive/2010/04/30/workaround-for-stackoverflowexception-when-using-slsvcutil-exe.aspx">here</a> over a year ago, is to add in a configuration file alongside slsvcutil.exe, called <strong>slsvcutil.exe.config</strong>, which will point to the neutral-culture assembly.</p>

<pre><code>&lt;configuration&gt;
  &lt;satelliteassemblies&gt;
    &lt;assembly name="SlSvcUtil, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
  &lt;/satelliteassemblies&gt;
&lt;/configuration&gt;
</code></pre>

<p>That's right. If you have set your system language to something <strong>other than US English</strong>, you will probably encounter this issue.</p>

<p>Enjoy.</p>
]]>
   </content>
   
 </entry>
 
 <entry>
   <title>Musing - Simpler UI Testing for WPF Apps</title>
   <link href="http://brendanforster.comsimpler-ui-testing-for-wpf-apps.html" />
   <updated>2011-03-26T11:00:00+08:00</updated>
   <id>http://brendanforster.com.com./simpler-ui-testing-for-wpf-apps</id>
   <content type="html">
	<![CDATA[<p>After spending some time this week getting to know Ruby and some of its testing frameworks (Shoulda, rspec, and TestCase), I thought I'd put pen
to paper and revisit why I started down this path.</p>

<p><strong>Some background</strong></p>

<p>The current project I am working on is a large data-driven WPF application, with a lot of complex scenarios to
identify, develop and test. There is a group of testers on the project, but I can see an opportunity to use
automated testing to verify functionality and allow testers to focus on areas of better value - exploratory testing, for example.</p>

<p>Yes, there are frameworks like <a href="http://white.codeplex.com/">White</a> or Coded UI Tests, but these tools were designed with developers in mind.
You have to write code like <a href="http://msdn.microsoft.com/en-us/magazine/dd483216.aspx">this</a> to drive the tests, and the tests are commonly written after the feature is implemented.</p>

<p><strong>Enter Automated Acceptance Testing</strong></p>

<p>In an ideal world, business users would define tests in an English-like language, which can then be translated into an executable
script and run against the application.</p>

<p>What I'm looking for in a framework for defining use cases:</p>

<ul>
<li>define the test first, so that the high-level scenario is set before development occurs</li>
<li>flexible with syntax for test cases - tailor scripts to suit people involved, while remaining declarative</li>
<li>integrate into deployment process to verify builds automated</li>
</ul>


<p><strong>Some inspiration from obscure corners</strong></p>

<p>When I first saw the syntax for <a href="http://msdn.microsoft.com/en-us/magazine/dd483216.aspx">webrat</a>, I was intrigued and jealous. To declare a test like this:</p>

<pre><code>class SignupTest &lt; ActionController::IntegrationTest

    def test_trial_account_sign_up
        visit home_path
        click_link "Sign up"
        fill_in "Email", :with =&gt; "good@example.com"
        select "Free account"
        click_button "Register"
    end
end
</code></pre>

<p>was not far off what I'd had in mind for something that was easy to follow and easy to write.</p>

<p>So I spent some time this week experimenting with various ways of achieving this against a sample WPF application.</p>

<p>I'm using rspec at the moment to run the test cases, and IronRuby and White to support the integration with the hosted WPF application.</p>

<p><strong>What does a test for the WPF application look like?</strong></p>

<pre><code>describe "new customers screen" do

    subject { Host.new(File.expand_path('./app/WpfTestApp.exe', File.dirname(__FILE__)))

    before(:each) do
        click "Add Customer"
    end

    it "cannot save empty form" do
        cannot_click "Save"
        can_click "Cancel"
    end

    it "can enter details for customer" do
        fill "FirstName", :with =&gt; "Brendan"
        fill "LastName", :with =&gt; "Forster"
        # and some other fields
        can_click "Save"
    end

    it "can save and return to main screen" do
        fill "FirstName", :with =&gt; "Brendan"
        fill "LastName", :with =&gt; "Forster"
        # and some other fields
        click "Save"
        assert_title "Dashboard"
    end

    after(:each) do
        cleanup
    end

    def method_missing(sym, *args, &amp;block)
        subject.send sym, *args, &amp;block
    end
end
</code></pre>

<p>The fields used here are based off the UI Automation features of the .NET Framework (some reading <a href="http://white.codeplex.com/">here</a> on recommendations)
which I'll dig into a bit later if people are interested.</p>

<p>The method_missing method is used to reduce the noise of writing "subject." to start each line - I'm not quite sold on the approach, but it was cleaner than the previous approaches I'd tried.
Also, rspec has a <a href="https://gist.github.com/663876">huge set of features</a> which I've barely scratched the surface on.</p>

<p>So with a set of files like the file above, the testrunner is a simple script to load specific files found in the current directory:</p>

<pre><code>require 'rubygems'
require 'rspec'
require 'host'

Dir[File.dirname(__FILE__) + '/*tests.rb'].each do |file| 
    load file
end
</code></pre>

<p>I'll share some more as I polish additional features (I'm most certainly doing Ruby wrong at the moment, so I keep refactoring code),
just needed to write this post.</p>
]]>
   </content>
   
 </entry>
 
 <entry>
   <title>Arguments about Project Structure</title>
   <link href="http://brendanforster.comarguments-about-project-structure.html" />
   <updated>2011-02-23T11:00:00+08:00</updated>
   <id>http://brendanforster.com.com./arguments-about-project-structure</id>
   <content type="html">
	<![CDATA[<p>Whenever it comes time to kick off a new project, how do you structure it?</p>

<p>Given a greenfields situation - or even one of my side projects - I go for this layout:</p>

<ul>
<li>build</li>
<li>lib</li>
<li>licenses</li>
<li>samples</li>
<li>src

<ul>
<li>Project.ModuleA</li>
<li>Project.ModuleB</li>
<li>Project.Shell</li>
<li>Project.sln</li>
</ul>
</li>
<li>tools</li>
</ul>


<p>And what do those these folders represent?</p>

<p><strong>build</strong> - scripts for building and deploying the application. As soon as the application is required to be deployed to different environments, this should be scripted and added to source control.</p>

<p><strong>lib</strong> - dependencies required by the application. I generally group the dependent assemblies if required, but will generally drop the dll-xml combination into the root folder.</p>

<p><strong>licenses</strong> - when doing OSS development, this is a must. I should bring this into my general projects, especially if it has a significant mix of dependencies and licenses to manage.</p>

<p><strong>samples</strong> - once the main solution gets beyond a specific size, it may be beneficial to separate the sample code out rather than compiling it within the main build.</p>

<p><strong>src</strong> - there be code.</p>

<p><strong>tools</strong> - dependencies required to build the application. This does not mean including every tool required to set up the developer baseline, but any special tools used during the build process</p>

<p>For example, these would not belong:</p>

<ul>
<li>Visual Studio</li>
<li>.NET Framework</li>
</ul>


<p>But I'd happily include these tools:</p>

<ul>
<li>FxCop</li>
<li>NCover</li>
<li>MSBuild Community Tasks</li>
</ul>


<p>as not all developers would have them installed on their machines.</p>

<h2>Why this structure?</h2>

<p><strong>Folder Names</strong></p>

<p>Remember the days of 8.3 filesystems? I do. But thankfully this isn't about that.</p>

<p>This structure also borrows from Unix conventions for arranging their codebases. I don't like how the necessary make files are hosted at the root.</p>

<p>As we're using Mercurial, we don't need to worry about using trunks or tags in the structure.</p>

<p><strong>Experience</strong></p>

<p>When I challenged <a href="http://twitter.com/aeoth">@aeoth's</a> project structure for the next version of MahTweets, he wanted to make it so that a developer with little experience in .NET (or programming) could download the source and try it out.</p>

<p>I'd argue the best introduction to a codebase is two things:</p>

<ul>
<li>a README file to provide some notes about the application</li>
<li>a batch file or script to run the application and execute tests</li>
<li>sample projects to complement the source</li>
</ul>


<p><strong>The build is important</strong></p>

<p>We had various pain points with the last version of MahTweets around managing loosely-coupled modules under development, and then building a signed ClickOnce installer with a custom script.</p>

<p>It ended up being a painful few nights bashing against MSBuild (have you ever tried to use SignFile manually?), but the effort burnt reminds me everytime I come across a new team or project to ask two simple questions:</p>

<ul>
<li>how can someone build and run the application with limited knowledge of the codebase?</li>
<li>how can someone test the application with limited knowledge of the codebase?</li>
</ul>


<p>If that process is known and documented, it highlights all the quirks with getting the application out. If it isn't documented, then typically you need to find the right person at the right time...</p>

<p>Putting the build components separate, but easily visible, makes everyone's life easier.</p>

<p><strong>Habit</strong></p>

<p>And lastly, this is my personal opinion. Having spent a lot of time playing around with Linux OSS in the past, I keep coming back to that style of structure when setting up my own projects. Seeing things like uppercase folder names at the root just feel odd.</p>
]]>
   </content>
   
 </entry>
 
 <entry>
   <title>Using Rx to Implement Filtering in MahTweets</title>
   <link href="http://brendanforster.comusing-rx-to-implement-filtering-in-mahtweets.html" />
   <updated>2011-02-19T11:00:00+08:00</updated>
   <id>http://brendanforster.com.com./using-rx-to-implement-filtering-in-mahtweets</id>
   <content type="html">
	<![CDATA[<p>As we're kicking development off for the next version of MahTweets in the coming weeks, the team has been looking at experimenting with new technology and bringing the most useful stuff into the application.</p>

<p>Filtering is one of the things that MahTweets is famous for, but we're always looking for ways to make it better and easier. We've been experimenting with using the <a href="http://msdn.microsoft.com/en-us/devlabs/ee794896">Reactive Extensions (Rx) for .NET</a> to simplify the entire pipeline and provide more freedom in the application.</p>

<h2>The Current Status</h2>

<p>MahTweets allow the user to filter streams by update type, contact or text. Filters can be applied to individual streams or globally.</p>

<p>Roughly speaking, this is how the filters are applied.</p>

<center><a href="img/posts/FiltersClassic.png"><img src="img/posts/FiltersClassic.png" width="700" /></a></center>


<p>Updates from external services are added to the queue, which then raises CollectionChangedEvent notifications to each views. The view is responsible for running an update through its configured filters.</p>

<p>Limitations about this approach:</p>

<ul>
<li>Global Ignores were implemented separately.</li>
<li>Custom filtering was implemented per update type.</li>
<li>UI was coupled to stream container and specific parameters.</li>
</ul>


<h2>First Cut using Rx</h2>

<p>FYI: If you're not familiar with the Observer Pattern, check out the <a href="http://en.wikipedia.org/wiki/Observer_pattern">Wikipedia article</a> for starters. Rx uses the Observer pattern heavily.</p>

<p>We had a habit of using the phrase "filter" in many places of the application. To clarify our intent, we introduced two specific interfaces:</p>

<ul>
<li><strong>IStatusSubscriber</strong> - an extension which subscribes to a stream of incoming requests.</li>
<li><strong>IConditionalSubscriber</strong> : <strong>IStatusSubscriber</strong> - an extension which filters the updates before propogating to its consumers. Pass-thru or exclude filters can be specified.</li>
</ul>


<p>Replacing the Queue of messages with an IObservable/IObserver dual allows the application to leverage the Subject&lt;T&gt; class to manage the interactions between the services and the clients. This class resides in System.Reactive.dll and implements both IObservable&lt;T&gt; and IObserver&lt;T&gt;.</p>

<p>MahTweets also had some demo plugins for stream analytics, and abstracting away the queue support allows the application to plug in additional "global" services, using the same interfaces. Rx also allows observers to specify which thread to execute on, so the usage of the Dispatcher, TaskPool or ThreadPool (depending on scenario) can be configured without any plumbing code.</p>

<p>The interactions between these components now looks like:</p>

<center><a href="img/posts/RxFirstCut.png"><img src="img/posts/RxFirstCut.png" width="700" /></a></center>


<p>The biggest change is that subscribers interact with the IObservable, rather than being encompassed within the view. Each list still combines a set of filters, which display the combined set of results on-screen. However, when multiple filters are run in parallel, invalid items may appear.</p>

<p>Limitations about this approach:</p>

<ul>
<li>Excluded updates may be propogated through other subscribers in the same view.</li>
<li>Global Ignores still not supported.</li>
</ul>


<h2>Back to the Drawing Board</h2>

<p>So after some shut-eye and sun, I revisited the initial design for the IObservable implementation. What stood out to me was that:</p>

<ul>
<li>Include and exclude side-by-side has always been somewhat complex - both for users to understand, and determining which takes priority.</li>
<li>Include and exclude filters didn't need to exist in the same location.</li>
<li>Rx can support chaining observers, however...</li>
<li>Chaining isn't what the Observer pattern is about.</li>
</ul>


<p>After some more musing, I formed an opinion about subscriber rules (only mine so far):</p>

<p><strong>An exclude rule is applied globally. An include rule is applied locally.</strong></p>

<p>From my experiences with using Twitter, the typical use cases for exclude filters are:</p>

<ul>
<li>"Great, another Twitter spam concept..." <em>looks at paper.li</em></li>
<li>"Person XYZ is tweeting too much right now. I don't want to hear him for a while..."</li>
<li>"Oops, I said the i-word and the spammers are out and about..."</li>
</ul>


<p>On the other hand, the use cases for include filters can be like:</p>

<ul>
<li>"I want to see what <em>this</em> group of contacts is talking about..."</li>
<li>"I want to see tweets mentioning 'ABC' - (side note: more on search later)..."</li>
<li>"I want to see my mentions/messages..."</li>
</ul>


<p>Compare and contract (perhaps your experiences differ).</p>

<h2>Second Cut using Rx</h2>

<p>The second cut of the design allows for three subscriber hooks:</p>

<ul>
<li>Subscribers register against the source observable, without any filtering applied.</li>
<li>Subscribers register against the output observable, with the global filtering applied.</li>
<li>Exclude rules are applied closer to the source.</li>
</ul>


<center><a href="img/posts/RxSecondCut.png"><img src="img/posts/RxSecondCut.png" width="700" /></a></center>


<p>An internal subscriber verifies a status against a list of exclusions, and propogates the status further if it is valid. Each view only requires its inclusion rules (or a wildcard rule if no rules specified) to display results.</p>

<h2>The Next Step</h2>

<ul>
<li>Debate with <a href="http://twitter.com/aeoth">@aeoth</a> on this</li>
<li>Performance Testing against a large set of data.</li>
<li>Demonstrating how external plugins can include their own rules.</li>
<li>Demonstrate user interface changes for vNext.</li>
</ul>

]]>
   </content>
   
 </entry>
 
 <entry>
   <title>WP7 - Memory Profiling Adventures - Navigation (Updated)</title>
   <link href="http://brendanforster.comwp7-memory-profiling-navigation.html" />
   <updated>2011-02-04T11:00:00+08:00</updated>
   <id>http://brendanforster.com.com./wp7-memory-profiling-navigation</id>
   <content type="html">
	<![CDATA[<p>In the course of wrapping up a SL-based WP7 application recently, I stumbled across a significant hurdle with memory consumption on the device...</p>

<h2>Updated</h2>

<p>After going back and forth with local Windows Phone guru <a href="http://nicksnettravels.builttoroam.com/">Nick Randolph</a> about the issue, and he <a href="http://nicksnettravels.builttoroam.com/blogengine/post/2011/02/10/Windows-Phone-7-Navigation-Memory-Usage.aspx">blogged</a> <a href="http://nicksnettravels.builttoroam.com/blogengine/post/2011/02/10/Windows-Phone-7-Navigation-Memory-Usage-Just-Got-Scary.aspx">about</a> the behaviour in more detail, we came to the conclusion that the garbage collection was not being triggered automatically. That's not necessarily a bad thing (see the <a href="http://nicksnettravels.builttoroam.com/blogengine/post/2011/02/10/Windows-Phone-7-Navigation-Memory-Usage-Just-Got-Scary.aspx">conditions for triggering a garbage collection</a> here) but is a concern for large WP7 applications.</p>

<p>The workaround I devised for this is to trigger a GC.Collect() after a number of page navigations. I would only add this to an application when absolutely necessary. The implementation of this I'll leave as an exercise to the reader.</p>

<p>Side note: I've seen various samples floating around which will use a timer to invoke a garbage collection call. Ignoring the use of timers on the device (which will drain the battery), a garbage collection call at an arbitrary time will likely impact on the user experience. Be smart about it, if you need to work this into an application.</p>

<p>Read on for the rest of the saga...</p>

<h2>Before We Begin...</h2>

<p>One of the requirements a WP7 application needs to satisfy is around memory consumption</p>

<h3>5.2.5 Memory Consumption</h3>


<p><em>An application must not exceed 90 MB of RAM usage, except on devices that have more than 256 MB of memory. You can use the <strong>DeviceExtendedProperties</strong> class to query the amount of memory that is available on the device and modify the application behavior at runtime to take advantage of additional memory. For more information, see the DeviceExtendedProperties class in MSDN.</em></p>

<p><em>Note:</em></p>

<p><em>The DeviceTotalMemory value returned by <strong>DeviceExtendedProperties</strong> indicates the physical RAM size in bytes. This value is less than the actual amount of device memory. For an application to pass certification, Microsoft recommends that the value returned by ApplicationPeakMemoryUsage is less than 90 MB when the DeviceTotalMemory is less than or equal to 256 MB</em></p>

<p>Source <a href="http://go.microsoft.com/?linkid=9730556">Microsoft</a></p>

<p>90 MB sounds like a lot of space - and yes, it is, when one remembers the era of 1.44MB diskettes (or earlier) you can't help but think that perhaps we are spoiled - but what can you do with that amount of memory?</p>

<p><strong>Note</strong> - Disregard the "devices with > 256MB" exception mentioned, as I want to see how we can optimise memory usage on SL without sacrificing features.</p>

<h2>How Do I Work Out My Memory Usage?</h2>

<p>As mentioned above, the <strong>DeviceExtendedProperties</strong> class contains a lot of runtime information about the application.</p>

<p>I drop this method into the App.xaml.cs class so that I can get statistics at any point of the application's lifecycle.</p>

<pre><code>public static void GetMemoryUsage(string task)
{
    var number = (long)DeviceExtendedProperties.GetValue("ApplicationCurrentMemoryUsage");
    Debug.WriteLine("{0} - ApplicationCurrentMemoryUsage: {1}", task, number);
    number = (long)DeviceExtendedProperties.GetValue("ApplicationPeakMemoryUsage");
    Debug.WriteLine("{0} - ApplicationPeakMemoryUsage: {1}", task, number);

    Debug.WriteLine("");
}
</code></pre>

<p>Oh, and don't forget the namespace</p>

<pre><code>using Microsoft.Phone.Info;
</code></pre>

<p>This allows parts of the application to log diagnostics, like:</p>

<pre><code>private void MainPageLoaded(object sender, RoutedEventArgs e)
{
    if (!App.ViewModel.IsDataLoaded)
        App.ViewModel.LoadData();

    App.GetMemoryUsage("Main - Loaded");

}
</code></pre>

<p>and see a message like in the Output Window:</p>

<pre><code>Main - Loaded - ApplicationCurrentMemoryUsage: 39870464
Main - Loaded - ApplicationPeakMemoryUsage: 39899136
</code></pre>

<h2>And now things get interesting...</h2>

<p>Testing out a simple application - two screens, both use the Panorama Control and independent ViewModels which display a "large" list of items (270-ish items, but text only).</p>

<p>Selecting an item in the main screen will navigate to the second screen. Pressing back will return the application to the main screen.</p>

<p>The code is <a href="http://brendanforster.com/get/panoramasample.zip">here</a> and the sample output can be seen on <a href="https://gist.github.com/812178">Gist</a></p>

<p>Graphing the memory at each step, the graph looks like this:</p>

<center><a href="img/posts/breakdown.png"><img src="img/posts/breakdown.png" width="800" /></a></center>


<p>But why is the memory footprint larger (by almost 10 MB) on returning to the main screen?</p>

<p><strong>Note:</strong> Removing the Panorama Control did not change this behaviour - it just made the numbers smaller (a 5MB difference rather than 10MB). Just a sign that making screens leaner will certainly assist with reducing the overall footprint, but not the answer I was looking for.</p>

<p>Repeating the scenario a few times, and the behaviour is the same.</p>

<center><a href="img/posts/pattern.png"><img src="img/posts/pattern.png" width="800" /></a></center>


<p>Puzzling...</p>

<h2>And the adventure begins</h2>

<p>The underlying <em>why</em> is what I want to understand more. Even with this simple application - which is displaying a large list of items - the size of the application is already close to the 90MB limit.</p>

<p>I've only been able to throw a couple of hours of spare time at this so far, but here's some notes from my investigation currently:</p>

<ul>
<li><p>Tested this with the <a href="http://windowsteamblog.com/windows_phone/b/wpdev/archive/2011/02/04/windows-phone-developer-tools-january-update.aspx">new emulator and SDK changes</a>. No change to the behaviour.</p></li>
<li><p>Haven't found any memory profiling tools for SL &amp; WP7 - if anyone has stuff in the works, I'd love to try them out. <a href="http://eqatec.com/Profiler/Overview.aspx">EQUATEC</a> make a profiler for CPU performance, which works wonderfully from my limited testing.</p></li>
<li><p>Aggressive garbage collection helped somewhat, but this approach makes me feel unclean. Using timers on the device to trigger a GC Collect is bad for battery performance, and the demo above shows that memory usage can spike between events for a PhoneApplicationPage.</p></li>
<li><p>Paging data from isolated storage could be worth attempting, but I don't think this is a temporary fix - as the application would load the full file, select a subset of the data, and then dispose the file. Chunking data in isolated storage would increase complexity.</p></li>
<li><p>Avoiding the use of navigation - and rolling some custom controls to support transitions instead - is the method that needs most work, but gives more control back to the application.</p></li>
</ul>

]]>
   </content>
   
 </entry>
 
 <entry>
   <title>MEF and Chaining Dependencies</title>
   <link href="http://brendanforster.commef-and-chaining-dependencies.html" />
   <updated>2010-12-20T11:00:00+08:00</updated>
   <id>http://brendanforster.com.com./mef-and-chaining-dependencies</id>
   <content type="html">
	<![CDATA[<p>A <a href="http://mef.codeplex.com/Thread/View">question</a> came up on the MEF discussion board recently (today?) about how to handle a complex graph of dependencies. Although it was "solved" - and I suspect it was a case of missing the required assembly, going by what info was at hand - it still prompted me to dig into how one can go beyond the basics.</p>

<h2>Scenario</h2>

<p>Imagine you have an application that calls off different services to execute tasks. Rather than hard-coding the services into the application, these can be defined as parts which are composed at runtime using MEF.</p>

<p>But the relationship between the application and the services is not straightforward, which gives a dependency graph similar to the below image:</p>

<center><img src="img/posts/DependencyGraph.png" height="500"  /></center>


<p>What should we do now?</p>

<p>As MEF uses the concept of a "contract" to resolve the [Import] and [Export]; statements sprinkled within an application, this ultimately comes down to two similar approaches.</p>

<h2>Using Contract Names</h2>

<p>If the Proxy and Service implementations are equivalent - so we can avoid using distinct interfaces for behaviour which is identical - then we can use the same interface and specify a different contract for each extensibiity point defined in the application.</p>

<pre><code>public class ConsumingApplication
{
    [ImportMany("Contoso.Application", typeof(IServiceProxy))]
    public IEnumerable&amp;lt;IServiceProxy&amp;gt; Services { get; set; }

    // implementation here
}
</code></pre>

<p>And our simple client can use the corresponding [Export] statement.</p>

<pre><code>[Export("Contoso.Application", typeof(IServiceProxy))]
public class StandaloneProxy : IServiceProxy
{
    // implementation here 
}
</code></pre>

<p>Our complex dependency has a bit more code, but it can be broken down into two main features:</p>

<p>The contract which it satisfies - <strong>Contoso.Application</strong> and <strong>IServiceProxy</strong></p>

<p>The contract which it requires - <strong>Contoso.External</strong> and <strong>IServiceProxy</strong></p>

<pre><code>[Export("Contoso.Application", typeof(IServiceProxy))]
public class ActualProxy : IServiceProxy
{
    [ImportMany("Contoso.External")]
    public IEnumerable&amp;lt;IServiceProxy&amp;gt; Services { get; set; }

    // implementation here
}
</code></pre>

<p>So while reusing the same interface, we can specify <em>how</em> the parts relate.</p>

<h2>Using Contract Types</h2>

<p>If the behaviour of the proxy and the actual service are different, then we can just use the types to represent the contract.</p>

<pre><code>public class ConsumingApplication
{
    [ImportMany(typeof(IServiceProxy))]
    public IEnumerable&amp;lt;IServiceProxy&amp;gt; Services { get; set; }

    // implementation here
}
</code></pre>

<p>The exported contract becomes:</p>

<pre><code>[Export(typeof(IServiceProxy))]
public class StandaloneProxy : IServiceProxy
{
    // implementation here
}
</code></pre>

<p>And our complex part still has two contracts:</p>

<p>The contract which it satisfies - the <strong>IServiceProxy</strong> contract.</p>

<p>The contract which it requires - the <strong>IService</strong> contract (implicit due to the awesomeness of ImportMany)</p>

<pre><code>[Export(typeof(IServiceProxy))]
public class ActualProxy : IServiceProxy
{
    [ImportMany]
    public IEnumerable&amp;lt;IService&amp;gt; Services { get; set; }

    // implementation here
}
</code></pre>

<p>No more magic strings, while still being able to declare</p>

<h2>And finally, InheritedExport</h2>

<p>To really simplify the contracts, you can use [InheritedExport] on the interface. This declares to MEF that all types which implement the interface should be used as exported parts, using the interface type as the contract.</p>

<p>So I annotate both interfaces:</p>

<pre><code>[InheritedExport]
public interface IServiceProxy
{
    // code here
}

&amp;#91;InheritedExport&amp;#92;
public interface IService
{
    // code here
}
</code></pre>

<p>and can eliminate all other [Export] attributes from the codebase:</p>

<pre><code>public class StandaloneProxy : IServiceProxy
{
    // implementation here
}

public class ActualProxy : IServiceProxy
{
    [ImportMany]
    public IEnumerable&amp;lt;IService&amp;gt; Services { get; set; }

    // implementation here
}
</code></pre>

<p>Thoughts?</p>
]]>
   </content>
   
 </entry>
 
 <entry>
   <title>MEF - [Import] vs [ImportingConstructor]</title>
   <link href="http://brendanforster.commef-import-vs-importingconstructor.html" />
   <updated>2010-10-23T11:00:00+08:00</updated>
   <id>http://brendanforster.com.com./mef-import-vs-importingconstructor</id>
   <content type="html">
	<![CDATA[<p>A short discussion on Twitter recently started as a result of Jeremy Likness' article on MEF at <a href="http://www.informit.com/articles/article.aspx?p=1635818">InformIT</a>. I recommend reading it for anyone who is looking for an introduction to the MEF concepts.</p>

<p>The healthy debate was ultimately about [Import] being easier than [ImportingConstructor] to use. I disagreed, but at the time couldn't really put my finger on why I preferred it.</p>

<p>After a bit of pondering, this is what I've come up with.</p>

<h2>Compare and Contrast - [Import] versus [ImportingConstructor]</h2>

<p>Compare these two segments of code:</p>

<p>The [Import] version...</p>

<pre><code>public class TwitterPlugin : IMicroblog
{
    [Import]
    private IApplicationSettingsService _applicationSettings;

    [Import]
    private IStatusUpdatesService _statusUpdatesService;

    [Import]
    private IContactsService _contacts;

    public TwitterPlugin()
    {
        // some constructor logic
    }
}
</code></pre>

<p>Or the [ImportingConstructor] version...</p>

<pre><code>public class TwitterPlugin : IMicroblog
{
    private readonly IApplicationSettingsProvider _applicationSettings;
    private readonly IStatusUpdateService _statusUpdatesService;
    private readonly IContactsService _contactsService;

    [ImportingConstructor]
    public Twitter(IApplicationSettingsProvider applicationSettings,
                   IStatusUpdateService statusUpdateService
                   IContactsService contactsService)
    {
       _applicationSettings = applicationSettings;
       _statusUpdatesService = statusUpdateService;
       _contactsService = contactsService;

       // some constructor logic
    }
}
</code></pre>

<p>So the second approach requires more code, but a good tool should have you saving many keystrokes - even Visual Studio 2010 will help out with that.</p>

<p>Other differences:</p>

<p><strong>Design - Constructor Injection versus Property Setters</strong></p>

<p>With the first approach, the properties are not populated until after the constructor is completed. If the class needs to perform tasks in the constructor which require its dependencies to be present, then you need to use the [ImportingConstructor] approach.</p>

<p>By using the [ImportingConstructor] attribute, the part declares to the container that it requires. Simple, easy to read, and can be used outside MEF by new'ing it up.</p>

<p><strong>Maintainability</strong></p>

<p>Jeremy raised a concern about the constructor signature growing over time, and that a set of properties on the class was a cleaner approach.</p>

<p>I see the "growing dependency count" as a design issue rather than a technical issue. Tacking on another [Import] attribute should be considered a code smell, just like adding an additional parameter to a constructor.</p>

<p>If your dependency count is more than a handful, then you should review the interfaces and see if they can be segregated/aggregated better. The dependency list is a representation of what the component requires to function. It should be the smallest possible set of interfaces, and no more. The interfaces should be lean and specialized, and classes can implement multiple interfaces if required.</p>

<p><strong>You can still use attributes</strong></p>

<p>Something these snippets don't demonstrate is that attributes can be combined with ImportingConstructor for specific scenarios:</p>

<p>For example, using [ImportMany]</p>

<pre><code>private readonly IEnumerable&lt;ICreditService&gt; _creditServices;

[ImportingConstructor]
public BankService([ImportMany] IEnumerable&amp;lt;IProductServices&amp;gt; productServices)
{
    _productServices = productServices;

    // some constructor logic
}
</code></pre>

<p>Or using AllowDefault to allow for scenarios where a component is not known:</p>

<pre><code>private readonly ILogger _logger;

[ImportingConstructor]
public BankService([Import(AllowDefault=true)] ILogger logger)
{
    if (logger == null)
        _logger = new DefaultLogger();
    else
        _logger = logger;

    // some constructor logic
}
</code></pre>

<p>And this still keeps all the composition "magic" in one location. MEF supports importing <a href="http://mef.codeplex.com/wikipage?title=Declaring%20Imports&amp;referringTitle=Guide">properties, fields and collections</a>, which could be scattered around the same class.</p>

<p><strong>Closing Statements</strong></p>

<p>Ultimately, I guess I'm advocating the [ImportingConstructor] approach because once a class grows to a significant complexity (requiring some parts and providing other parts) I feel that it is the saner approach.</p>

<p>For getting start with MEF, [Import] works fine - the barrier to entry is lowered greatly. But as the composition graph grows in an application - e.g. A &lt;-&gt; B &lt;-&gt; C &lt;-&gt; D - then I'd start simplifying the classes and pushing more "magic" into the constructor for readability's sake.</p>

<h2>While we're talking managing MEF parts</h2>

<p>When I first started using MEF, I avoided ImportingConstructor like the plague. Every time I saw ImportingConstructor being used, I thought "<em>Why add a constructor parameter to the constructor when I can just add an attribute?</em>"</p>

<p>After all, it just worked.</p>

<p>It was easy to get started with MEF - as the application grows, you can sprinkle some more magic around.</p>

<p>I've been using MEF since the early previews (Preview 6 i think was the first drop I tried out) for various apps. One of the bigger codebases running on MEF is <a href="http://www.mahtweets.com/">MahTweets</a>, a pluggable WPF client for various social media services.</p>

<p>For an upcoming release, I'm currently refactoring the MahTweets internals to replace StructureMap with Autofac. The <a href="http://code.google.com/p/autofac/wiki/MefIntegration">MEF integration extensions for Autofac</a> have been a great help to simplify the integration between Autofac's ContainerBuilder and MEF's ComposablePartCatalog, and I've found ways to reduce the required MEF syntax without changing existing functionality.</p>

<p>On the Autofac side, we can declare components in the container to be available for MEF composition.</p>

<pre><code>container.RegisterType&amp;lt;ApplicationSettingsProvider&amp;gt;()
         .As&amp;lt;IApplicationSettingsProvider&amp;gt;()
         .Exported(x =&amp;gt; x.As&amp;lt;IApplicationSettingsProvider&amp;gt;()) // make this part visible to MEF components
         .SingleInstance();

container.RegisterType&amp;lt;PluginSettingsProvider&amp;gt;()
         .As&amp;lt;IPluginSettingsProvider&amp;gt;()
         .Exported(x =&gt; x.As&amp;lt;IPluginSettingsProvider&amp;gt;())
         .SingleInstance();

...

// register external plugins for consumption
container.RegisterComposablePartCatalog(catalog);
</code></pre>

<p>This allows for better separation between the application and external parts, and reduces effort required to register a component with both the IoC container and the CompositionContainer.</p>

<p>I'll blog some more in the future on how you can use these parts to help manage MEF applications as they grow. I need to check out the MEF v2 drops first :)</p>
]]>
   </content>
   
 </entry>
 
 <entry>
   <title>IoC Tips - Autofac Factory Adapters</title>
   <link href="http://brendanforster.comioc-tips-autofac-factory-adapters.html" />
   <updated>2010-10-23T11:00:00+08:00</updated>
   <id>http://brendanforster.com.com./ioc-tips-autofac-factory-adapters</id>
   <content type="html">
	<![CDATA[<h2>Scenario</h2>

<p>A team has a change request come in from the business. For one of their screens, a timer should count up when a user pauses the current task.</p>

<p>As the application was already using an IoC container (Autofac), and a timer was already implemented to provide the behaviour for a similar task in this class, the constructor was quickly changed to:</p>

<pre><code>public ScheduledBackupService(
      ... ,
      ITimer elapsedTimer,
      ITimer pausedTimer)
{
      ...
      this.elapsedTimer = elapsedTimer;
      this.pausedTimer = pausedTimer;
      ...
</code></pre>

<p>And from there they added in the additional code required, and the business was happy. And there was much rejoicing. But the team noticed that they were duplicating the same type in the constructor. Can the team do it better?</p>

<p>Rather than explicitly defining the two instances, the team can replace both instances with a factory adapter. In .NET, this can be represented as a Func%lt;T%gt; object - a method which requires no inputs and returns an instance of type T:</p>

<pre><code>public ScheduledBackupService(
      ... , 
      Func&lt;ITimer&gt; createTimer)
{
      ...                 
      elapsedTimer = createTimer();
      pausedTimer = createTimer();
      ...
</code></pre>

<p>To fix the compiler error from changing the constructor signature, the test code is updated to:</p>

<pre><code>private IScheduledBackupService GetScheduledBackupService()
{
    return new ScheduledBackupService(
                ... ,
                () =&gt; MockRepository.GenerateStub&lt;ITimer&gt;());
}
</code></pre>

<h2>What about those unit tests?</h2>

<p>What if we need to use the mock object in a unit test - to raise events or stub methods? We can't track them if we use the function defined above...</p>

<p>As our existing tests relied on verifying the messages displayed using ITimer instances, I wrote a custom function to mimic the function behaviour and support the unit tests.</p>

<pre><code>private Func&lt;IDispatcherTimer&gt; createTimers = () =&gt;
{
    if (elapsedTimer == null) 
    {
        // first call -&gt; mock "elapsed" timer
        elapsedTimer = MockRepository.GenerateStub&lt;ITimer&gt;();
        return elapsedTimer;
    }
    if (pausedTimer == null) 
    {
        // second call -&gt; mock "paused" timer
        pausedTimer = MockRepository.GenerateStub&lt;ITimer&gt;(); 
        return pausedTimer;
    }

    return null; // subsequent calls not supported - will raise errors if used
};

private IScheduledBackupService GetScheduledBackupService()
{
    return new ScheduledBackupService(
                    ... ,
                    createTimers);
}
</code></pre>

<p>And our tests remain clean and readable:</p>

<pre><code>[TestMethod]
public void ElapsedTimer_WhenServiceResumes_StartsAgain()
{
    // arrange
    var service = GetScheduledBackupService();

    // act
    service.Start();
    service.Pause();
    service.Resume();

    // assert
    elapsedTimer.AssertWasCalled(s =&gt; s.Start(), m =&gt; m.Repeat.Twice());
    elapsedTimer.AssertWasCalled(s =&gt; s.Stop(), m =&gt; m.Repeat.Once());
}
</code></pre>

<h2>What else can I do from the container?</h2>

<p>Nicholas Blumhardt, maintainer of Autofac, has a <a href="http://nblumhardt.com/2010/01/the-relationship-zoo/">detailed entry</a> which discusses the different possible relationships between components, and how Autofac defines them. While the article is Autofac-centric, many of the other inversion of control containers for the .NET Framework support some of the features already.</p>

<p>A great read if you want to dive deeper into inversion of control concepts.</p>
]]>
   </content>
   
 </entry>
 
 <entry>
   <title>Amped Web 2010 Recap</title>
   <link href="http://brendanforster.comamped-web-2010-recap.html" />
   <updated>2010-10-16T11:00:00+08:00</updated>
   <id>http://brendanforster.com.com./amped-web-2010-recap</id>
   <content type="html">
	<![CDATA[<p><strong>Disclaimer:</strong> I'm currently running on a few hours of sleep so corrections may be required as the memories return. I'm also waiting for some of the photos to surface from the day - including <a href="http://twitter.com/Rog42">@Rog42</a>'s crazy photography experiments!</p>

<p>Yesterday was the <a href="http://www.ampedweb.org/">Amped Web</a> day, a hack day following the Web Directions South conference held in Sydney. The day is for teams to compete in specific categories - around design and development - and put together a solution in a few hours. It may have been an all-day event, but the time flew by. The solutions were reviewed by judges over the afternoon - providing feedback and suggestions as the teams polished their ideas.</p>

<p>I teamed up with <a href="http://tath.am/">Tatham Oddie</a> (<a href="http://twitter.com/tathamoddie">@tathamoddie</a>) and <a href="http://aaron-powell.com/">Aaron Powell</a> (<a href="http://twitter.com/slace">@slace</a>) to create a platform and prototype client for a specific problem.</p>

<p>What was that problem? Check out the video!</p>

<object width="480" height="385">
    <param name="movie" value="http://www.youtube.com/v/2ln9cTSkNtI?fs=1&amp;hl=en_US&amp;rel=0"></param>
    <param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param>
    <embed src="http://www.youtube.com/v/2ln9cTSkNtI?fs=1&amp;hl=en_US&amp;rel=0" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="480" height="385">
    </embed>
</object>


<p>All the details are available on <a href="http://openconferenceprotocol.org/">http://openconferenceprotocol.org/</a>.</p>

<p>Our solution won the Best Overall Windows Phone application, and the "product launch" was a pitch to win the Grand Prize - a trip to Tokyo next month for <a href="http://east.webdirections.org/2010/">Web Directions East</a>.</p>

<p>When the dust settled and all the teams had their pitches, the judges decided to send us to Japan! I'm looking forward to seeing the Japanese development community in action, and it will be my first trip to Japan. Time to learn some more Ruby - and some Japanese won't hurt either!</p>

<p>Special thanks to John Allsopp (<a href="http://twitter.com/johnallsopp">@johnallsopp</a>) and the other organisers of Web Directions for putting together a great event. The sponsors of the event - Windows Phone, Adobe, Paypal, SBS, the Powerhouse Museum and others - also helped make the day awesome with food, swag and prizes.</p>

<p>I'll have to check out the full conference - and return to defend our title - in 2011.</p>

<p>But now, Tokyo awaits!</p>

<p><em>Footnote:</em></p>

<p>We'll continue to polish our idea over the coming weeks - adding features, enhancing the story, getting feedback from the community - so stay tuned for more. I'll put up a higher-res video of the WP7 application for those who are having troubles seeing it clearly in the pitch.</p>

<p>For those who have specific questions, you can leave a comment here or reach me on Twitter (<a href="http://twitter.com/shiftkey">@shiftkey</a>)</p>
]]>
   </content>
   
 </entry>
 
 <entry>
   <title>Hello World</title>
   <link href="http://brendanforster.comhello-world.html" />
   <updated>2010-09-23T08:50:44+08:00</updated>
   <id>http://brendanforster.com.com./hello-world</id>
   <content type="html">
	<![CDATA[<p>Starting off this blog with a simple post. More styling to come during the coming days.</p>

<p><strong>Side note:</strong> here's the Factorial function in F#:</p>

<pre><code>let rec factorial n =
match n with
| 0 -&gt; 1
| _ -&gt; n * factorial (n - 1)
</code></pre>
]]>
   </content>
   
 </entry>
 
 
</feed>